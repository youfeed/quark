{"version":3,"sources":["../../src/packages/loading/cs-loading.mjs"],"names":["CsLoading","HTMLElement","observedAttributes","constructor","shadowRoot","attachShadow","mode","innerHTML","size","getAttribute","color","value","setAttribute","connectedCallback","loading","getElementById","attributeChangedCallback","name","oldValue","newValue","style","fontSize","customElements","get","define"],"mappings":"AAAA,eAAe,MAAMA,SAAN,SAAwBC,WAAxB,CAAoC;AAElB,aAAlBC,kBAAkB,GAAG;AAAE,WAAO,CAAC,OAAD,EAAS,MAAT,CAAP;AAAyB;;AAE3DC,EAAAA,WAAW,GAAG;AACV;AACA,UAAMC,UAAU,GAAG,KAAKC,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB,CAAnB;AACAF,IAAAA,UAAU,CAACG,SAAX,GAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAhDQ;AAiDH;;AAEO,MAAJC,IAAI,GAAG;AACP,WAAO,KAAKC,YAAL,CAAkB,MAAlB,KAA2B,EAAlC;AACH;;AAEQ,MAALC,KAAK,GAAG;AACR,WAAO,KAAKD,YAAL,CAAkB,OAAlB,KAA4B,EAAnC;AACH;;AAEO,MAAJD,IAAI,CAACG,KAAD,EAAQ;AACZ,SAAKC,YAAL,CAAkB,MAAlB,EAA0BD,KAA1B;AACH;;AAEQ,MAALD,KAAK,CAACC,KAAD,EAAQ;AACb,SAAKC,YAAL,CAAkB,OAAlB,EAA2BD,KAA3B;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAe,KAAKV,UAAL,CAAgBW,cAAhB,CAA+B,SAA/B,CAAf;AACA,SAAKP,IAAL,KAAc,KAAKA,IAAL,GAAY,KAAKA,IAA/B;AACA,SAAKE,KAAL,KAAe,KAAKA,KAAL,GAAa,KAAKA,KAAjC;AACH;;AAEDM,EAAAA,wBAAwB,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,QAAlB,EAA4B;AAChD,QAAIF,IAAI,IAAI,OAAR,IAAmB,KAAKH,OAA5B,EAAoC;AAChC,WAAKA,OAAL,CAAaM,KAAb,CAAmBV,KAAnB,GAA2BS,QAA3B;AACH;;AACD,QAAIF,IAAI,IAAI,MAAR,IAAkB,KAAKH,OAA3B,EAAmC;AAC/B,WAAKA,OAAL,CAAaM,KAAb,CAAmBC,QAAnB,GAA8BF,QAAQ,GAAG,IAAzC;AACH;AACJ;;AAvF8C;;AA0FnD,IAAG,CAACG,cAAc,CAACC,GAAf,CAAmB,YAAnB,CAAJ,EAAqC;AACjCD,EAAAA,cAAc,CAACE,MAAf,CAAsB,YAAtB,EAAoCxB,SAApC;AACH","sourcesContent":["export default class CsLoading extends HTMLElement {\n\n    static get observedAttributes() { return ['color','size'] }\n\n    constructor() {\n        super();\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        shadowRoot.innerHTML = `\n        <style>\n        :host{\n            font-size:inherit;\n            display:inline-flex;\n            align-items: center;\n            justify-content:center;\n            color:var(--themeColor,#0088FF);\n        }\n        .loading{\n            display: block;\n            width: 1em;\n            height: 1em;\n            margin: auto;\n            animation: rotate 1.4s linear infinite;\n        }\n        .circle {\n            stroke: currentColor;\n            animation:  progress 1.4s ease-in-out infinite;\n            stroke-dasharray: 80px, 200px;\n            stroke-dashoffset: 0px;\n            transition:.3s;\n        }\n        :host(:not(:empty)) .loading{\n            margin:.5em;\n        }\n        @keyframes rotate{\n            to{\n                transform: rotate(360deg); \n            }\n        }\n        @keyframes progress {\n            0% {\n              stroke-dasharray: 1px, 200px;\n              stroke-dashoffset: 0px; \n            }\n            50% {\n              stroke-dasharray: 100px, 200px;\n              stroke-dashoffset: -15px; \n            }\n            100% {\n              stroke-dasharray: 100px, 200px;\n              stroke-dashoffset: -125px; \n            } \n        }\n        </style>\n        <svg class=\"loading\" id=\"loading\" viewBox=\"22 22 44 44\"><circle class=\"circle\" cx=\"44\" cy=\"44\" r=\"20.2\" fill=\"none\" stroke-width=\"3.6\"></circle></svg>\n        <slot></slot>\n        `\n    }\n\n    get size() {\n        return this.getAttribute('size')||'';\n    }\n\n    get color() {\n        return this.getAttribute('color')||'';\n    }\n\n    set size(value) {\n        this.setAttribute('size', value);\n    }\n\n    set color(value) {\n        this.setAttribute('color', value);\n    }\n    \n    connectedCallback() {\n        this.loading = this.shadowRoot.getElementById('loading');\n        this.size && (this.size = this.size);\n        this.color && (this.color = this.color);\n    }\n\n    attributeChangedCallback (name, oldValue, newValue) {\n        if( name == 'color' && this.loading){\n            this.loading.style.color = newValue;\n        }\n        if( name == 'size' && this.loading){\n            this.loading.style.fontSize = newValue + 'px';\n        }\n    }\n}\n\nif(!customElements.get('cs-loading')){\n    customElements.define('cs-loading', CsLoading);\n}"],"file":"cs-loading.js"}